{"language": "Solidity", "sources": {"contracts/SafeMath.sol": {"content": "pragma solidity ^0.5.0;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a); // dev: overflow\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a); // dev: underflow\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b); // dev: overflow\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0); // dev: divide by zero\n        c = a / b;\n    }\n}\n"}, "contracts/Token.sol": {"content": "pragma solidity ^0.5.0;\n\nimport \"./SafeMath.sol\";\n\ncontract Token {\n\n    using SafeMath for uint256;\n\n    string public symbol;\n    string public  name;\n    uint256 public decimals;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    event Transfer(address from, address to, uint256 value);\n    event Approval(address owner, address spender, uint256 value);\n\n    constructor(\n        string memory _symbol,\n        string memory _name,\n        uint256 _decimals,\n        uint256 _totalSupply\n    )\n        public\n    {\n        symbol = _symbol;\n        name = _name;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    function () external payable {\n        revert();\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        returns (bool)\n    {\n        require(allowed[_from][msg.sender] >=_value, \"Insufficient allowance\");\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n}\n"}}, "settings": {"outputSelection": {"*": {"*": ["abi", "devdoc", "evm.bytecode", "evm.deployedBytecode", "userdoc"], "": ["ast"]}}, "evmVersion": "istanbul", "remappings": ["OpenZeppelin=/home/computer/.brownie/packages/OpenZeppelin", "makerdao=/home/computer/.brownie/packages/makerdao", "compound-finance=/home/computer/.brownie/packages/compound-finance"], "optimizer": {"enabled": true, "runs": 200}}}